unavailable_points = []

points = {"A1" : (0,0), "A2" : (0,1), "A3" : (0,2), "A4" : (0,3), "A5" : (0,4),
          "B1" : (1,0), "B2" : (1,1), "B3" : (1,2), "B4" : (1,3), "B5" : (1,4),
          "C1" : (2,0), "C2" : (2,1), "C3" : (2,2), "C4" : (2,3), "C5" : (2,4),
          "D1" : (3,0), "D2" : (3,1), "D3" : (3,2), "D4" : (3,3), "D5" : (3,4),
          "E1" : (4,0), "E2" : (4,1), "E3" : (4,2), "E4" : (4,3), "E5" : (4,4),}

rows = ["A", "B", "C", "D", "E"]
columns = ["1", "2", "3", "4", "5"]

players = []
player_1 = input("wprowadź imię pierwszego gracza: \n> ")
player_1 = player_1.upper()
players.append(player_1)
player_2 = input("wprowadź imię drugiego gracza: \n> ")
player_2 = player_2.upper()
players.append(player_2)

def get_empty_board():
    empty_board = [['░', '░', '░', '░', '░'],
                   ['░', '░', '░', '░', '░'],
                   ['░', '░', '░', '░', '░'],
                   ['░', '░', '░', '░', '░'],
                   ['░', '░', '░', '░', '░']]
    return empty_board

def display_board(board):
    print(" ")
    print(" ")
    print("     ", "ocean gracza")
    print("     ", "•", players[0], "•")
    print(" ")
    print("   ", "    1   2   3   4   5")
    print("   ", "  ╔═══╤═══╤═══╤═══╤═══╗")
    print("   ", "A", "║", board[0][0], "│", board[0][1], "│", board[0][2], "│", board[0][3], "│", board[0][4], "║")
    print("   ", "  ╟───┼───┼───┼───┼───╢")
    print("   ", "B", "║", board[1][0], "│", board[1][1], "│", board[1][2], "│", board[1][3], "│", board[1][4], "║")
    print("   ", "  ╟───┼───┼───┼───┼───╢")
    print("   ", "C", "║", board[2][0], "│", board[2][1], "│", board[2][2], "│", board[2][3], "│", board[2][4], "║")
    print("   ", "  ╟───┼───┼───┼───┼───╢")
    print("   ", "D", "║", board[3][0], "│", board[3][1], "│", board[3][2], "│", board[3][3], "│", board[3][4], "║")
    print("   ", "  ╟───┼───┼───┼───┼───╢")
    print("   ", "E", "║", board[4][0], "│", board[4][1], "│", board[4][2], "│", board[4][3], "│", board[4][4], "║")
    print("   ", "  ╚═══╧═══╧═══╧═══╧═══╝")


def ship_kuter_coord(board):
    
    while True:
        print(players[0])
        user_coord = input("wprowadź współrzędną dla kutra:\n> ")
        user_coord = user_coord.upper()
        if len(user_coord) == 2:
            if user_coord in points:
                coord = points[user_coord]
            else:
                print("Źle wprowadzona współrzędna, spróbuj ponownie\n")
                continue
            if board[coord[0]][coord[1]] == "░":
                if user_coord not in unavailable_points:
                    board[coord[0]][coord[1]] = "•"
                    if user_coord[0] == "A":
                        if user_coord[1] == "1":
                            unavailable_points.extend([("A" + str(int(user_coord[1]) + 1)), ("B" + user_coord[1])])
                        elif int(user_coord[1]) > 1 and int(user_coord[1]) < 5:
                            unavailable_points.extend([("A" + str(int(user_coord[1]) - 1)), ("A" + str(int(user_coord[1]) + 1)), ("B" + user_coord[1])])
                        elif user_coord[1] == "5":
                            unavailable_points.extend([("A" + str(int(user_coord[1]) - 1)), ("B" + user_coord[1])])
                    elif user_coord[0] == "B":
                        if user_coord[1] == "1":
                            unavailable_points.extend([("A" + user_coord[1]), ("B" + str(int(user_coord[1]) + 1)), ("C" + user_coord[1])])
                        elif int(user_coord[1]) > 1 and int(user_coord[1]) < 5:
                            unavailable_points.extend([("A" + user_coord[1]), ("B" + str(int(user_coord[1]) - 1)), ("B" + str(int(user_coord[1]) + 1)), ("C" + user_coord[1])])
                        elif user_coord[1] == "5":
                            unavailable_points.extend([("A" + user_coord[1]), ("B" + str(int(user_coord[1]) - 1)), ("C" + user_coord[1])])
                    elif user_coord[0] == "C":
                        if user_coord[1] == "1":
                            unavailable_points.extend([("B" + user_coord[1]), ("C" + str(int(user_coord[1]) + 1)), ("D" + user_coord[1])])
                        elif int(user_coord[1]) > 1 and int(user_coord[1]) < 5:
                            unavailable_points.extend([("B" + user_coord[1]), ("C" + str(int(user_coord[1]) - 1)), ("C" + str(int(user_coord[1]) + 1)), ("D" + user_coord[1])])
                        elif user_coord[1] == "5":
                            unavailable_points.extend([("B" + user_coord[1]), ("C" + str(int(user_coord[1]) - 1)), ("D" + user_coord[1])])
                    elif user_coord[0] == "D":
                        if user_coord[1] == "1":
                            unavailable_points.extend([("C" + user_coord[1]), ("D" + str(int(user_coord[1]) + 1)), ("E" + user_coord[1])])
                        elif int(user_coord[1]) > 1 and int(user_coord[1]) < 5:
                            unavailable_points.extend([("C" + user_coord[1]), ("D" + str(int(user_coord[1]) - 1)), ("D" + str(int(user_coord[1]) + 1)), ("E" + user_coord[1])])
                        elif user_coord[1] == "5":
                            unavailable_points.extend([("C" + user_coord[1]), ("D" + str(int(user_coord[1]) - 1)), ("E" + user_coord[1])])
                    elif user_coord[0] == "E":
                        if user_coord[1] == "1":
                            unavailable_points.extend([("D" + user_coord[1]), ("E" + str(int(user_coord[1]) + 1))])
                        elif int(user_coord[1]) > 1 and int(user_coord[1]) < 5:
                            unavailable_points.extend([("D" + user_coord[1]), ("E" + str(int(user_coord[1]) - 1)), ("E" + str(int(user_coord[1]) + 1))])
                        elif user_coord[1] == "5":
                            unavailable_points.extend([("D" + user_coord[1]), ("E" + str(int(user_coord[1]) - 1))])
                    display_board(board)
                    break
                else:
                    print("statki nie moga płynąć tak blisko siebie")
            else:
                print("To pole jest już zajęte")
        else:
            print("Źle wprowadzone współrzędne")

def start_game():
    board = get_empty_board()
    print(" ")
    print(" ")
    print(" ")
    print(" ")
    print(players[0], "ustaw pierwszy kuter na oceanie")
    display_board(board)
    print(" ")
    ship_kuter_coord(board)
    board_player_1 = board
    print(unavailable_points)
    print(players[0], "ustaw drugi kuter na oceanie")
    display_board(board_player_1)
    print(" ")
    ship_kuter_coord(board_player_1)

    for coordinate in unavailable_points:
        if unavailable_points.count(coordinate) > 1:
            unavailable_points.remove(coordinate)
            
    print(unavailable_points)
    return board_player_1

start_game()